ACLARK.NET, LLC â€” DB
====================

Client & Contractor Database Application
----------------------------------------

Based on data exported from `Harvest <https://www.getharvest.com/>`_

Heroku
~~~~~~

::

    git remote add heroku git@heroku.com:aclarknet-database.git
    git remote add heroku git@heroku.com:aclarknet-database2.git

Social
~~~~~~

- http://artandlogic.com/2014/04/tutorial-adding-facebooktwittergoogle-authentication-to-a-django-application/
- https://console.developers.google.com/


Models
~~~~~~

.. image:: graph_models.png


AWS
~~~

::

    Ubuntu 16.04.1 LTS

::

    sudo apt-get install aptitude awscli graphviz graphviz-dev jq libpq-dev libxml2 libxml2-dev libxslt-dev make nginx postgresql python python3 python3-pip python3-virtualenv python-dev

systemd
~~~~~~~

gunicorn.service
++++++++++++++++

::

    [Unit]
    Description=gunicorn daemon
    Requires=gunicorn.socket
    After=network.target

    [Service]
    # env | sort > /srv/aclarknet-database/env
    EnvironmentFile=/srv/aclarknet-database/env

    PIDFile=/run/gunicorn/pid
    User=ubuntu
    Group=ubuntu
    RuntimeDirectory=gunicorn
    WorkingDirectory=/srv/aclarknet-database
    ExecStart=/srv/aclarknet-database/bin/gunicorn -c /srv/aclarknet-database/logging.conf --pid /run/gunicorn/pid --bind unix:/run/gunicorn/socket aclarknet.wsgi
    ExecReload=/bin/kill -s HUP $MAINPID
    ExecStop=/bin/kill -s TERM $MAINPID
    PrivateTmp=true

    [Install]
    WantedBy=multi-user.target

gunicorn.socket
+++++++++++++++

::

    [Unit]
    Description=gunicorn socket

    [Socket]
    ListenStream=/run/gunicorn/socket

    [Install]
    WantedBy=sockets.target

NGINX
~~~~~

/etc/nginx/sites-enabled/default 
++++++++++++++++++++++++++++++++

::

    ##
    # You should look at the following URL's in order to grasp a solid understanding
    # of Nginx configuration files in order to fully unleash the power of Nginx.
    # http://wiki.nginx.org/Pitfalls
    # http://wiki.nginx.org/QuickStart
    # http://wiki.nginx.org/Configuration
    #
    # Generally, you will want to move this file somewhere, and start with a clean
    # file but keep this around for reference. Or just disable in sites-enabled.
    #
    # Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
    ##

    # Default server configuration
    #
    server {
        # listen 80 default_server;
        # listen [::]:80 default_server;

        # SSL configuration
        #
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!

        ssl    on;
        ssl_certificate    /etc/letsencrypt/live/db.aclark.net/fullchain.pem;
        ssl_certificate_key    /etc/letsencrypt/live/db.aclark.net/privkey.pem;

        #
        # include snippets/snakeoil.conf;

        root /var/www/html;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;

        server_name _;

        location / {
            # First attempt to serve request as file, then
            # as directory, then fall back to displaying a 404.
            # try_files $uri $uri/ =404;
            # proxy_pass http://127.0.0.1:8000;
                    proxy_pass http://unix:/run/gunicorn/socket;
                proxy_set_header Host      $host;
                proxy_set_header X-Real-IP $remote_addr;
        }

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #   include snippets/fastcgi-php.conf;
        #
        #   # With php7.0-cgi alone:
        #   fastcgi_pass 127.0.0.1:9000;
        #   # With php7.0-fpm:
        #   fastcgi_pass unix:/run/php/php7.0-fpm.sock;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #   deny all;
        #}
    }


    # Virtual Host configuration for example.com
    #
    # You can move that to a different file under sites-available/ and symlink that
    # to sites-enabled/ to enable it.
    #
    server {
        listen 80;
        listen [::]:80;

        # server_name example.com;
        server_name _;

        root /var/www/example.com;
        index index.html;

        location / {
            try_files $uri $uri/ =404;
        }

        return 301 https://$host$request_uri;
    }

